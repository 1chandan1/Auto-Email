name: Update EXE in Release

on:
  push:
    branches:
      - main  # Adjust to your branch name

jobs:
  build-and-update-release:
    runs-on: windows-latest  # Use a Windows runner with Node.js 16

    steps:
      # - name: Checkout Code
      #   uses: actions/checkout@v4

      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.11.0  # Specify the Python version you need
      #     architecture: x64  # Use x64 or x86 based on your requirements

      # - name: Install Dependencies
      #   run: |
      #     pip install pyinstaller
      #     pip install -r requirements.txt
      #   working-directory: ./  # Modify this path

      # - name: Create .env File
      #   run: echo 'CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}' > .env

      # - name: Create Version File
      #   run: python -c "import datetime; print(datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'))" > version.txt
        
      # - name: Build EXE
      #   run: |
      #     pyinstaller --noconfirm --onefile --console --icon "bot.ico" --name "AutoEmail" --clean --add-data "attachment.pdf:." --add-data "version.txt:." --add-data ".env:." --add-data "template.docx:." --add-data "updater.exe:." --distpath ./output "auto_email.py"
      #   working-directory: ./  # Modify this path

      # - name: Get Release ID
      #   id: get_release
      #   uses: octokit/request-action@v2.x
      #   with:
      #     route: GET /repos/${{ github.repository }}/releases/tags/EXE
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Perform API Operation with Python
        run: |
          python -c "
          import requests
          import os

          # Set the API endpoint
          url = 'https://api.github.com/your/endpoint/here'

          # Set headers
          headers = {
              'Authorization': f'token {os.getenv('GITHUB_TOKEN')}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # Make the request
          response = requests.delete(url, headers=headers)

          # Check response
          if response.status_code == 204:
              print('Success!')
          else:
              print('Failed with status code:', response.status_code)
              print('Response:', response.text)
          "
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        

      # - name: Upload New EXE to Release
      #   run: |
      #     curl \
      #       -X POST \
      #       -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       -H "Content-Type: application/octet-stream" \
      #       --data-binary @./output/AutoEmail.exe \
      #       ${{ fromJson(steps.get_release.outputs.data).upload_url }}?name=AutoEmail.exe
      #   if: steps.get_release.outputs.data
