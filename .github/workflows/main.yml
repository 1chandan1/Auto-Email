name: Update EXE in Release

on:
  push:
    branches:
      - main  # Adjust to your branch name

jobs:
  build-and-update-release:
    runs-on: windows-latest  # Use a Windows runner with Node.js 16

    steps:
      # - name: Checkout Code
      #   uses: actions/checkout@v4

      # - name: Set up Python
      #   uses: actions/setup-python@v4
      #   with:
      #     python-version: 3.11.0  # Specify the Python version you need
      #     architecture: x64  # Use x64 or x86 based on your requirements

      # - name: Install Dependencies
      #   run: |
      #     pip install pyinstaller
      #     pip install -r requirements.txt
      #   working-directory: ./  # Modify this path

      # - name: Create .env File
      #   run: echo 'CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}' > .env

      # - name: Create Version File
      #   run: python -c "import datetime; print(datetime.datetime.now().strftime('%Y-%m-%dT%H:%M:%SZ'))" > version.txt
        
      # - name: Build EXE
      #   run: |
      #     pyinstaller --noconfirm --onefile --console --icon "bot.ico" --name "AutoEmail" --clean --add-data "attachment.pdf:." --add-data "version.txt:." --add-data ".env:." --add-data "template.docx:." --add-data "updater.exe:." --distpath ./output "auto_email.py"
      #   working-directory: ./  # Modify this path

      - name: Install Python Requests Library
        run: pip install requests

      - name: Manage Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: python manage_release.py ${{ github.repository }} EXE

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: "EXE"
      #     release_name: "Release EXE"
      #     draft: false
      #     prerelease: false

      # - name: Upload EXE to Release
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./output/AutoEmail.exe
      #     asset_name: AutoEmail.exe
      #     asset_content_type: application/octet-stream
